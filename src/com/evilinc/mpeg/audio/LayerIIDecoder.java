/**********************************************************************
 *
 *  Copyright Ian Quick 2002
 *  
 *  This file is part of MicroMpeg.
 *
 *   MicroMpeg is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   MicroMpeg is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with MicroMpeg; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 **********************************************************************/
package com.evilinc.mpeg.audio;

import com.evilinc.mpeg.*;
import java.io.*;

class LayerIIDecoder extends LayerIDecoder implements IFrameDecoder
{
    public LayerIIDecoder( IOTool ioTool, AudioFrameHeader header, SynthesisFilter filter1, SynthesisFilter filter2, int channels)
    {
        super(ioTool, header,filter1, filter2, channels );
    }
    
    protected void createSubbands()
    {
        if( m_iMode == AudioFrameHeader.SINGLE_CHANNEL )
        {
            for( int i = 0 ; i < m_iNumSubBands ; ++i)
                m_subbands[i] = new SubbandLayer2(i);
        }
        else if( m_iMode == AudioFrameHeader.JOINT_STEREO )
        {
            int i;
            for( i = 0; i < m_audioHeader.getIntensityStereoBound() ; ++i )
            {
                m_subbands[i] = new SubbandLayer2Stereo(i);
            }

            for( ; i < m_iNumSubBands ; ++i )
                m_subbands[i] = new SubbandLayer2IntensityStereo(i);

        }
        else
        {
            for( int i = 0 ; i < m_iNumSubBands ; ++i )
            {
                m_subbands[i] = new SubbandLayer2Stereo(i);
            }
        }
    }

    protected void readScaleFactorSelection()
    {
        for( int i = 0 ; i < m_iNumSubBands ; ++i )
        {
            ((SubbandLayer2)m_subbands[i]).readScaleFactorSelection(m_ioTool, m_crc[0] );
        }
    }

    static class SubbandLayer2 extends Subband
    {
        // this table contains 3 requantized samples for each legal codeword
        // when grouped in 5 bits, i.e. 3 quantizationsteps per sample
        
        public static final int grouping_5bits[] =
        {
            -43691, -43691, -43691, 0, -43691, -43691, 43691, -43691, 
            -43691, -43691, 0, -43691, 0, 0, -43691, 43691, 
            0, -43691, -43691, 43691, -43691, 0, 43691, -43691, 
            43691, 43691, -43691, -43691, -43691, 0, 0, -43691, 
            0, 43691, -43691, 0, -43691, 0, 0, 0, 
            0, 0, 43691, 0, 0, -43691, 43691, 0, 
            0, 43691, 0, 43691, 43691, 0, -43691, -43691, 
            43691, 0, -43691, 43691, 43691, -43691, 43691, -43691, 
            0, 43691, 0, 0, 43691, 43691, 0, 43691, 
            -43691, 43691, 43691, 0, 43691, 43691, 43691, 43691, 
            43691, 
        };

        public static final int grouping_7bits[] =
        {
            -52429, -52429, -52429, -26214, -52429, -52429, 0, -52429, 
            -52429, 26214, -52429, -52429, 52429, -52429, -52429, -52429, 
            -26214, -52429, -26214, -26214, -52429, 0, -26214, -52429, 
            26214, -26214, -52429, 52429, -26214, -52429, -52429, 0, 
            -52429, -26214, 0, -52429, 0, 0, -52429, 26214, 
            0, -52429, 52429, 0, -52429, -52429, 26214, -52429, 
            -26214, 26214, -52429, 0, 26214, -52429, 26214, 26214, 
            -52429, 52429, 26214, -52429, -52429, 52429, -52429, -26214, 
            52429, -52429, 0, 52429, -52429, 26214, 52429, -52429, 
            52429, 52429, -52429, -52429, -52429, -26214, -26214, -52429, 
            -26214, 0, -52429, -26214, 26214, -52429, -26214, 52429, 
            -52429, -26214, -52429, -26214, -26214, -26214, -26214, -26214, 
            0, -26214, -26214, 26214, -26214, -26214, 52429, -26214, 
            -26214, -52429, 0, -26214, -26214, 0, -26214, 0, 
            0, -26214, 26214, 0, -26214, 52429, 0, -26214, 
            -52429, 26214, -26214, -26214, 26214, -26214, 0, 26214, 
            -26214, 26214, 26214, -26214, 52429, 26214, -26214, -52429, 
            52429, -26214, -26214, 52429, -26214, 0, 52429, -26214, 
            26214, 52429, -26214, 52429, 52429, -26214, -52429, -52429, 
            0, -26214, -52429, 0, 0, -52429, 0, 26214, 
            -52429, 0, 52429, -52429, 0, -52429, -26214, 0, 
            -26214, -26214, 0, 0, -26214, 0, 26214, -26214, 
            0, 52429, -26214, 0, -52429, 0, 0, -26214, 
            0, 0, 0, 0, 0, 26214, 0, 0, 
            52429, 0, 0, -52429, 26214, 0, -26214, 26214, 
            0, 0, 26214, 0, 26214, 26214, 0, 52429, 
            26214, 0, -52429, 52429, 0, -26214, 52429, 0, 
            0, 52429, 0, 26214, 52429, 0, 52429, 52429, 
            0, -52429, -52429, 26214, -26214, -52429, 26214, 0, 
            -52429, 26214, 26214, -52429, 26214, 52429, -52429, 26214, 
            -52429, -26214, 26214, -26214, -26214, 26214, 0, -26214, 
            26214, 26214, -26214, 26214, 52429, -26214, 26214, -52429, 
            0, 26214, -26214, 0, 26214, 0, 0, 26214, 
            26214, 0, 26214, 52429, 0, 26214, -52429, 26214, 
            26214, -26214, 26214, 26214, 0, 26214, 26214, 26214, 
            26214, 26214, 52429, 26214, 26214, -52429, 52429, 26214, 
            -26214, 52429, 26214, 0, 52429, 26214, 26214, 52429, 
            26214, 52429, 52429, 26214, -52429, -52429, 52429, -26214, 
            -52429, 52429, 0, -52429, 52429, 26214, -52429, 52429, 
            52429, -52429, 52429, -52429, -26214, 52429, -26214, -26214, 
            52429, 0, -26214, 52429, 26214, -26214, 52429, 52429, 
            -26214, 52429, -52429, 0, 52429, -26214, 0, 52429, 
            0, 0, 52429, 26214, 0, 52429, 52429, 0, 
            52429, -52429, 26214, 52429, -26214, 26214, 52429, 0, 
            26214, 52429, 26214, 26214, 52429, 52429, 26214, 52429, 
            -52429, 52429, 52429, -26214, 52429, 52429, 0, 52429, 
            52429, 26214, 52429, 52429, 52429, 52429, 52429, 
        };

        public static final int grouping_10bits[] =
        {
            -58254, -58254, -58254, -43691, -58254, -58254, -29127, -58254, 
            -58254, -14564, -58254, -58254, 0, -58254, -58254, 14564, 
            -58254, -58254, 29127, -58254, -58254, 43691, -58254, -58254, 
            58254, -58254, -58254, -58254, -43691, -58254, -43691, -43691, 
            -58254, -29127, -43691, -58254, -14564, -43691, -58254, 0, 
            -43691, -58254, 14564, -43691, -58254, 29127, -43691, -58254, 
            43691, -43691, -58254, 58254, -43691, -58254, -58254, -29127, 
            -58254, -43691, -29127, -58254, -29127, -29127, -58254, -14564, 
            -29127, -58254, 0, -29127, -58254, 14564, -29127, -58254, 
            29127, -29127, -58254, 43691, -29127, -58254, 58254, -29127, 
            -58254, -58254, -14564, -58254, -43691, -14564, -58254, -29127, 
            -14564, -58254, -14564, -14564, -58254, 0, -14564, -58254, 
            14564, -14564, -58254, 29127, -14564, -58254, 43691, -14564, 
            -58254, 58254, -14564, -58254, -58254, 0, -58254, -43691, 
            0, -58254, -29127, 0, -58254, -14564, 0, -58254, 
            0, 0, -58254, 14564, 0, -58254, 29127, 0, 
            -58254, 43691, 0, -58254, 58254, 0, -58254, -58254, 
            14564, -58254, -43691, 14564, -58254, -29127, 14564, -58254, 
            -14564, 14564, -58254, 0, 14564, -58254, 14564, 14564, 
            -58254, 29127, 14564, -58254, 43691, 14564, -58254, 58254, 
            14564, -58254, -58254, 29127, -58254, -43691, 29127, -58254, 
            -29127, 29127, -58254, -14564, 29127, -58254, 0, 29127, 
            -58254, 14564, 29127, -58254, 29127, 29127, -58254, 43691, 
            29127, -58254, 58254, 29127, -58254, -58254, 43691, -58254, 
            -43691, 43691, -58254, -29127, 43691, -58254, -14564, 43691, 
            -58254, 0, 43691, -58254, 14564, 43691, -58254, 29127, 
            43691, -58254, 43691, 43691, -58254, 58254, 43691, -58254, 
            -58254, 58254, -58254, -43691, 58254, -58254, -29127, 58254, 
            -58254, -14564, 58254, -58254, 0, 58254, -58254, 14564, 
            58254, -58254, 29127, 58254, -58254, 43691, 58254, -58254, 
            58254, 58254, -58254, -58254, -58254, -43691, -43691, -58254, 
            -43691, -29127, -58254, -43691, -14564, -58254, -43691, 0, 
            -58254, -43691, 14564, -58254, -43691, 29127, -58254, -43691, 
            43691, -58254, -43691, 58254, -58254, -43691, -58254, -43691, 
            -43691, -43691, -43691, -43691, -29127, -43691, -43691, -14564, 
            -43691, -43691, 0, -43691, -43691, 14564, -43691, -43691, 
            29127, -43691, -43691, 43691, -43691, -43691, 58254, -43691, 
            -43691, -58254, -29127, -43691, -43691, -29127, -43691, -29127, 
            -29127, -43691, -14564, -29127, -43691, 0, -29127, -43691, 
            14564, -29127, -43691, 29127, -29127, -43691, 43691, -29127, 
            -43691, 58254, -29127, -43691, -58254, -14564, -43691, -43691, 
            -14564, -43691, -29127, -14564, -43691, -14564, -14564, -43691, 
            0, -14564, -43691, 14564, -14564, -43691, 29127, -14564, 
            -43691, 43691, -14564, -43691, 58254, -14564, -43691, -58254, 
            0, -43691, -43691, 0, -43691, -29127, 0, -43691, 
            -14564, 0, -43691, 0, 0, -43691, 14564, 0, 
            -43691, 29127, 0, -43691, 43691, 0, -43691, 58254, 
            0, -43691, -58254, 14564, -43691, -43691, 14564, -43691, 
            -29127, 14564, -43691, -14564, 14564, -43691, 0, 14564, 
            -43691, 14564, 14564, -43691, 29127, 14564, -43691, 43691, 
            14564, -43691, 58254, 14564, -43691, -58254, 29127, -43691, 
            -43691, 29127, -43691, -29127, 29127, -43691, -14564, 29127, 
            -43691, 0, 29127, -43691, 14564, 29127, -43691, 29127, 
            29127, -43691, 43691, 29127, -43691, 58254, 29127, -43691, 
            -58254, 43691, -43691, -43691, 43691, -43691, -29127, 43691, 
            -43691, -14564, 43691, -43691, 0, 43691, -43691, 14564, 
            43691, -43691, 29127, 43691, -43691, 43691, 43691, -43691, 
            58254, 43691, -43691, -58254, 58254, -43691, -43691, 58254, 
            -43691, -29127, 58254, -43691, -14564, 58254, -43691, 0, 
            58254, -43691, 14564, 58254, -43691, 29127, 58254, -43691, 
            43691, 58254, -43691, 58254, 58254, -43691, -58254, -58254, 
            -29127, -43691, -58254, -29127, -29127, -58254, -29127, -14564, 
            -58254, -29127, 0, -58254, -29127, 14564, -58254, -29127, 
            29127, -58254, -29127, 43691, -58254, -29127, 58254, -58254, 
            -29127, -58254, -43691, -29127, -43691, -43691, -29127, -29127, 
            -43691, -29127, -14564, -43691, -29127, 0, -43691, -29127, 
            14564, -43691, -29127, 29127, -43691, -29127, 43691, -43691, 
            -29127, 58254, -43691, -29127, -58254, -29127, -29127, -43691, 
            -29127, -29127, -29127, -29127, -29127, -14564, -29127, -29127, 
            0, -29127, -29127, 14564, -29127, -29127, 29127, -29127, 
            -29127, 43691, -29127, -29127, 58254, -29127, -29127, -58254, 
            -14564, -29127, -43691, -14564, -29127, -29127, -14564, -29127, 
            -14564, -14564, -29127, 0, -14564, -29127, 14564, -14564, 
            -29127, 29127, -14564, -29127, 43691, -14564, -29127, 58254, 
            -14564, -29127, -58254, 0, -29127, -43691, 0, -29127, 
            -29127, 0, -29127, -14564, 0, -29127, 0, 0, 
            -29127, 14564, 0, -29127, 29127, 0, -29127, 43691, 
            0, -29127, 58254, 0, -29127, -58254, 14564, -29127, 
            -43691, 14564, -29127, -29127, 14564, -29127, -14564, 14564, 
            -29127, 0, 14564, -29127, 14564, 14564, -29127, 29127, 
            14564, -29127, 43691, 14564, -29127, 58254, 14564, -29127, 
            -58254, 29127, -29127, -43691, 29127, -29127, -29127, 29127, 
            -29127, -14564, 29127, -29127, 0, 29127, -29127, 14564, 
            29127, -29127, 29127, 29127, -29127, 43691, 29127, -29127, 
            58254, 29127, -29127, -58254, 43691, -29127, -43691, 43691, 
            -29127, -29127, 43691, -29127, -14564, 43691, -29127, 0, 
            43691, -29127, 14564, 43691, -29127, 29127, 43691, -29127, 
            43691, 43691, -29127, 58254, 43691, -29127, -58254, 58254, 
            -29127, -43691, 58254, -29127, -29127, 58254, -29127, -14564, 
            58254, -29127, 0, 58254, -29127, 14564, 58254, -29127, 
            29127, 58254, -29127, 43691, 58254, -29127, 58254, 58254, 
            -29127, -58254, -58254, -14564, -43691, -58254, -14564, -29127, 
            -58254, -14564, -14564, -58254, -14564, 0, -58254, -14564, 
            14564, -58254, -14564, 29127, -58254, -14564, 43691, -58254, 
            -14564, 58254, -58254, -14564, -58254, -43691, -14564, -43691, 
            -43691, -14564, -29127, -43691, -14564, -14564, -43691, -14564, 
            0, -43691, -14564, 14564, -43691, -14564, 29127, -43691, 
            -14564, 43691, -43691, -14564, 58254, -43691, -14564, -58254, 
            -29127, -14564, -43691, -29127, -14564, -29127, -29127, -14564, 
            -14564, -29127, -14564, 0, -29127, -14564, 14564, -29127, 
            -14564, 29127, -29127, -14564, 43691, -29127, -14564, 58254, 
            -29127, -14564, -58254, -14564, -14564, -43691, -14564, -14564, 
            -29127, -14564, -14564, -14564, -14564, -14564, 0, -14564, 
            -14564, 14564, -14564, -14564, 29127, -14564, -14564, 43691, 
            -14564, -14564, 58254, -14564, -14564, -58254, 0, -14564, 
            -43691, 0, -14564, -29127, 0, -14564, -14564, 0, 
            -14564, 0, 0, -14564, 14564, 0, -14564, 29127, 
            0, -14564, 43691, 0, -14564, 58254, 0, -14564, 
            -58254, 14564, -14564, -43691, 14564, -14564, -29127, 14564, 
            -14564, -14564, 14564, -14564, 0, 14564, -14564, 14564, 
            14564, -14564, 29127, 14564, -14564, 43691, 14564, -14564, 
            58254, 14564, -14564, -58254, 29127, -14564, -43691, 29127, 
            -14564, -29127, 29127, -14564, -14564, 29127, -14564, 0, 
            29127, -14564, 14564, 29127, -14564, 29127, 29127, -14564, 
            43691, 29127, -14564, 58254, 29127, -14564, -58254, 43691, 
            -14564, -43691, 43691, -14564, -29127, 43691, -14564, -14564, 
            43691, -14564, 0, 43691, -14564, 14564, 43691, -14564, 
            29127, 43691, -14564, 43691, 43691, -14564, 58254, 43691, 
            -14564, -58254, 58254, -14564, -43691, 58254, -14564, -29127, 
            58254, -14564, -14564, 58254, -14564, 0, 58254, -14564, 
            14564, 58254, -14564, 29127, 58254, -14564, 43691, 58254, 
            -14564, 58254, 58254, -14564, -58254, -58254, 0, -43691, 
            -58254, 0, -29127, -58254, 0, -14564, -58254, 0, 
            0, -58254, 0, 14564, -58254, 0, 29127, -58254, 
            0, 43691, -58254, 0, 58254, -58254, 0, -58254, 
            -43691, 0, -43691, -43691, 0, -29127, -43691, 0, 
            -14564, -43691, 0, 0, -43691, 0, 14564, -43691, 
            0, 29127, -43691, 0, 43691, -43691, 0, 58254, 
            -43691, 0, -58254, -29127, 0, -43691, -29127, 0, 
            -29127, -29127, 0, -14564, -29127, 0, 0, -29127, 
            0, 14564, -29127, 0, 29127, -29127, 0, 43691, 
            -29127, 0, 58254, -29127, 0, -58254, -14564, 0, 
            -43691, -14564, 0, -29127, -14564, 0, -14564, -14564, 
            0, 0, -14564, 0, 14564, -14564, 0, 29127, 
            -14564, 0, 43691, -14564, 0, 58254, -14564, 0, 
            -58254, 0, 0, -43691, 0, 0, -29127, 0, 
            0, -14564, 0, 0, 0, 0, 0, 14564, 
            0, 0, 29127, 0, 0, 43691, 0, 0, 
            58254, 0, 0, -58254, 14564, 0, -43691, 14564, 
            0, -29127, 14564, 0, -14564, 14564, 0, 0, 
            14564, 0, 14564, 14564, 0, 29127, 14564, 0, 
            43691, 14564, 0, 58254, 14564, 0, -58254, 29127, 
            0, -43691, 29127, 0, -29127, 29127, 0, -14564, 
            29127, 0, 0, 29127, 0, 14564, 29127, 0, 
            29127, 29127, 0, 43691, 29127, 0, 58254, 29127, 
            0, -58254, 43691, 0, -43691, 43691, 0, -29127, 
            43691, 0, -14564, 43691, 0, 0, 43691, 0, 
            14564, 43691, 0, 29127, 43691, 0, 43691, 43691, 
            0, 58254, 43691, 0, -58254, 58254, 0, -43691, 
            58254, 0, -29127, 58254, 0, -14564, 58254, 0, 
            0, 58254, 0, 14564, 58254, 0, 29127, 58254, 
            0, 43691, 58254, 0, 58254, 58254, 0, -58254, 
            -58254, 14564, -43691, -58254, 14564, -29127, -58254, 14564, 
            -14564, -58254, 14564, 0, -58254, 14564, 14564, -58254, 
            14564, 29127, -58254, 14564, 43691, -58254, 14564, 58254, 
            -58254, 14564, -58254, -43691, 14564, -43691, -43691, 14564, 
            -29127, -43691, 14564, -14564, -43691, 14564, 0, -43691, 
            14564, 14564, -43691, 14564, 29127, -43691, 14564, 43691, 
            -43691, 14564, 58254, -43691, 14564, -58254, -29127, 14564, 
            -43691, -29127, 14564, -29127, -29127, 14564, -14564, -29127, 
            14564, 0, -29127, 14564, 14564, -29127, 14564, 29127, 
            -29127, 14564, 43691, -29127, 14564, 58254, -29127, 14564, 
            -58254, -14564, 14564, -43691, -14564, 14564, -29127, -14564, 
            14564, -14564, -14564, 14564, 0, -14564, 14564, 14564, 
            -14564, 14564, 29127, -14564, 14564, 43691, -14564, 14564, 
            58254, -14564, 14564, -58254, 0, 14564, -43691, 0, 
            14564, -29127, 0, 14564, -14564, 0, 14564, 0, 
            0, 14564, 14564, 0, 14564, 29127, 0, 14564, 
            43691, 0, 14564, 58254, 0, 14564, -58254, 14564, 
            14564, -43691, 14564, 14564, -29127, 14564, 14564, -14564, 
            14564, 14564, 0, 14564, 14564, 14564, 14564, 14564, 
            29127, 14564, 14564, 43691, 14564, 14564, 58254, 14564, 
            14564, -58254, 29127, 14564, -43691, 29127, 14564, -29127, 
            29127, 14564, -14564, 29127, 14564, 0, 29127, 14564, 
            14564, 29127, 14564, 29127, 29127, 14564, 43691, 29127, 
            14564, 58254, 29127, 14564, -58254, 43691, 14564, -43691, 
            43691, 14564, -29127, 43691, 14564, -14564, 43691, 14564, 
            0, 43691, 14564, 14564, 43691, 14564, 29127, 43691, 
            14564, 43691, 43691, 14564, 58254, 43691, 14564, -58254, 
            58254, 14564, -43691, 58254, 14564, -29127, 58254, 14564, 
            -14564, 58254, 14564, 0, 58254, 14564, 14564, 58254, 
            14564, 29127, 58254, 14564, 43691, 58254, 14564, 58254, 
            58254, 14564, -58254, -58254, 29127, -43691, -58254, 29127, 
            -29127, -58254, 29127, -14564, -58254, 29127, 0, -58254, 
            29127, 14564, -58254, 29127, 29127, -58254, 29127, 43691, 
            -58254, 29127, 58254, -58254, 29127, -58254, -43691, 29127, 
            -43691, -43691, 29127, -29127, -43691, 29127, -14564, -43691, 
            29127, 0, -43691, 29127, 14564, -43691, 29127, 29127, 
            -43691, 29127, 43691, -43691, 29127, 58254, -43691, 29127, 
            -58254, -29127, 29127, -43691, -29127, 29127, -29127, -29127, 
            29127, -14564, -29127, 29127, 0, -29127, 29127, 14564, 
            -29127, 29127, 29127, -29127, 29127, 43691, -29127, 29127, 
            58254, -29127, 29127, -58254, -14564, 29127, -43691, -14564, 
            29127, -29127, -14564, 29127, -14564, -14564, 29127, 0, 
            -14564, 29127, 14564, -14564, 29127, 29127, -14564, 29127, 
            43691, -14564, 29127, 58254, -14564, 29127, -58254, 0, 
            29127, -43691, 0, 29127, -29127, 0, 29127, -14564, 
            0, 29127, 0, 0, 29127, 14564, 0, 29127, 
            29127, 0, 29127, 43691, 0, 29127, 58254, 0, 
            29127, -58254, 14564, 29127, -43691, 14564, 29127, -29127, 
            14564, 29127, -14564, 14564, 29127, 0, 14564, 29127, 
            14564, 14564, 29127, 29127, 14564, 29127, 43691, 14564, 
            29127, 58254, 14564, 29127, -58254, 29127, 29127, -43691, 
            29127, 29127, -29127, 29127, 29127, -14564, 29127, 29127, 
            0, 29127, 29127, 14564, 29127, 29127, 29127, 29127, 
            29127, 43691, 29127, 29127, 58254, 29127, 29127, -58254, 
            43691, 29127, -43691, 43691, 29127, -29127, 43691, 29127, 
            -14564, 43691, 29127, 0, 43691, 29127, 14564, 43691, 
            29127, 29127, 43691, 29127, 43691, 43691, 29127, 58254, 
            43691, 29127, -58254, 58254, 29127, -43691, 58254, 29127, 
            -29127, 58254, 29127, -14564, 58254, 29127, 0, 58254, 
            29127, 14564, 58254, 29127, 29127, 58254, 29127, 43691, 
            58254, 29127, 58254, 58254, 29127, -58254, -58254, 43691, 
            -43691, -58254, 43691, -29127, -58254, 43691, -14564, -58254, 
            43691, 0, -58254, 43691, 14564, -58254, 43691, 29127, 
            -58254, 43691, 43691, -58254, 43691, 58254, -58254, 43691, 
            -58254, -43691, 43691, -43691, -43691, 43691, -29127, -43691, 
            43691, -14564, -43691, 43691, 0, -43691, 43691, 14564, 
            -43691, 43691, 29127, -43691, 43691, 43691, -43691, 43691, 
            58254, -43691, 43691, -58254, -29127, 43691, -43691, -29127, 
            43691, -29127, -29127, 43691, -14564, -29127, 43691, 0, 
            -29127, 43691, 14564, -29127, 43691, 29127, -29127, 43691, 
            43691, -29127, 43691, 58254, -29127, 43691, -58254, -14564, 
            43691, -43691, -14564, 43691, -29127, -14564, 43691, -14564, 
            -14564, 43691, 0, -14564, 43691, 14564, -14564, 43691, 
            29127, -14564, 43691, 43691, -14564, 43691, 58254, -14564, 
            43691, -58254, 0, 43691, -43691, 0, 43691, -29127, 
            0, 43691, -14564, 0, 43691, 0, 0, 43691, 
            14564, 0, 43691, 29127, 0, 43691, 43691, 0, 
            43691, 58254, 0, 43691, -58254, 14564, 43691, -43691, 
            14564, 43691, -29127, 14564, 43691, -14564, 14564, 43691, 
            0, 14564, 43691, 14564, 14564, 43691, 29127, 14564, 
            43691, 43691, 14564, 43691, 58254, 14564, 43691, -58254, 
            29127, 43691, -43691, 29127, 43691, -29127, 29127, 43691, 
            -14564, 29127, 43691, 0, 29127, 43691, 14564, 29127, 
            43691, 29127, 29127, 43691, 43691, 29127, 43691, 58254, 
            29127, 43691, -58254, 43691, 43691, -43691, 43691, 43691, 
            -29127, 43691, 43691, -14564, 43691, 43691, 0, 43691, 
            43691, 14564, 43691, 43691, 29127, 43691, 43691, 43691, 
            43691, 43691, 58254, 43691, 43691, -58254, 58254, 43691, 
            -43691, 58254, 43691, -29127, 58254, 43691, -14564, 58254, 
            43691, 0, 58254, 43691, 14564, 58254, 43691, 29127, 
            58254, 43691, 43691, 58254, 43691, 58254, 58254, 43691, 
            -58254, -58254, 58254, -43691, -58254, 58254, -29127, -58254, 
            58254, -14564, -58254, 58254, 0, -58254, 58254, 14564, 
            -58254, 58254, 29127, -58254, 58254, 43691, -58254, 58254, 
            58254, -58254, 58254, -58254, -43691, 58254, -43691, -43691, 
            58254, -29127, -43691, 58254, -14564, -43691, 58254, 0, 
            -43691, 58254, 14564, -43691, 58254, 29127, -43691, 58254, 
            43691, -43691, 58254, 58254, -43691, 58254, -58254, -29127, 
            58254, -43691, -29127, 58254, -29127, -29127, 58254, -14564, 
            -29127, 58254, 0, -29127, 58254, 14564, -29127, 58254, 
            29127, -29127, 58254, 43691, -29127, 58254, 58254, -29127, 
            58254, -58254, -14564, 58254, -43691, -14564, 58254, -29127, 
            -14564, 58254, -14564, -14564, 58254, 0, -14564, 58254, 
            14564, -14564, 58254, 29127, -14564, 58254, 43691, -14564, 
            58254, 58254, -14564, 58254, -58254, 0, 58254, -43691, 
            0, 58254, -29127, 0, 58254, -14564, 0, 58254, 
            0, 0, 58254, 14564, 0, 58254, 29127, 0, 
            58254, 43691, 0, 58254, 58254, 0, 58254, -58254, 
            14564, 58254, -43691, 14564, 58254, -29127, 14564, 58254, 
            -14564, 14564, 58254, 0, 14564, 58254, 14564, 14564, 
            58254, 29127, 14564, 58254, 43691, 14564, 58254, 58254, 
            14564, 58254, -58254, 29127, 58254, -43691, 29127, 58254, 
            -29127, 29127, 58254, -14564, 29127, 58254, 0, 29127, 
            58254, 14564, 29127, 58254, 29127, 29127, 58254, 43691, 
            29127, 58254, 58254, 29127, 58254, -58254, 43691, 58254, 
            -43691, 43691, 58254, -29127, 43691, 58254, -14564, 43691, 
            58254, 0, 43691, 58254, 14564, 43691, 58254, 29127, 
            43691, 58254, 43691, 43691, 58254, 58254, 43691, 58254, 
            -58254, 58254, 58254, -43691, 58254, 58254, -29127, 58254, 
            58254, -14564, 58254, 58254, 0, 58254, 58254, 14564, 
            58254, 58254, 29127, 58254, 58254, 43691, 58254, 58254, 
            58254, 58254, 58254, 
        };        

        
        // subbands 0-2 in tables 3-B.2a and 2b: (index is allocation)
        public static final int table_ab1_codelength[] =
            // bits per codeword
        { 0, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

        public static final int table_ab1_groupingtables[][] =
            // pointer to sample grouping table, or NULL-pointer if ungrouped
        { null, grouping_5bits, null, null, null, null, null, null, null, null, null, null, null, null, null, null };

        public static final int table_ab1_factor[] =
        {
            0, 32768, 16384, 8192, 4096, 2048, 1024, 512, 
            256, 128, 64, 32, 16, 8, 4, 2, 
        };
            
        public static final int table_ab1_c[] =
        {
            0, 87381, 74898, 69905, 67650, 66576, 66052, 65793, 
            65664, 65600, 65568, 65552, 65544, 65540, 65538, 65537, 
        };
        // factor c for requantization from table 3-B.4

        public static final int table_ab1_d[] =
        {
            0, 32768, 16384, 8192, 4096, 2048, 1024, 512, 
            256, 128, 64, 32, 16, 8, 4, 2, 
        };
        // addend d for requantization from table 3-B.4


        // subbands 3-... tables 3-B.2a and 2b:
        public static final int[] table_ab234_groupingtables[] =
        { null, grouping_5bits, grouping_7bits, null, grouping_10bits, null, null, null, null, null, null, null, null, null, null, null };

        // subbands 3-10 in tables 3-B.2a and 2b:
        public static final int table_ab2_codelength[] =
        { 0, 5, 7, 3, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16 };

        public static final int table_ab2_factor[] =
        {
            0, 32768, 16384, 16384, 8192, 8192, 4096, 2048, 
            1024, 512, 256, 128, 64, 32, 16, 2, 
        };

        public static final int table_ab2_c[] =
        {
            0, 87381, 104858, 74898, 116508, 69905, 67650, 66576, 
            66052, 65793, 65664, 65600, 65568, 65552, 65544, 65537, 
        };

        public static final int table_ab2_d[] =
        {
            0, 32768, 32768, 16384, 32768, 8192, 4096, 2048, 
            1024, 512, 256, 128, 64, 32, 16, 2, 
        };

        // subbands 11-22 in tables 3-B.2a and 2b:
        public static final int table_ab3_codelength[] = { 0, 5, 7, 3, 10, 4, 5, 16 };
        public static final int table_ab3_factor[] =
        {
            0, 32768, 16384, 16384, 8192, 8192, 4096, 2, 
        };
        public static final int table_ab3_c[] =
        {
            0, 87381, 104858, 74898, 116508, 69905, 67650, 65537, 
        };
        public static final int table_ab3_d[] =
        {
            0, 32768, 32768, 16384, 32768, 8192, 4096, 2, 
        };

        // subbands 23-... in tables 3-B.2a and 2b:
        public static final int table_ab4_codelength[] = { 0, 5, 7, 16 };
        public static final int table_ab4_factor[] =
        {
            0, 32768, 16384, 2, 
        };

        public static final int table_ab4_c[] =
        {
            0, 87381, 104858, 65537, 
        };

        public static final int table_ab4_d[] =
        {
            0, 32768, 32768, 2, 
        };


        // subbands in tables 3-B.2c and 2d:
        public static final int table_cd_codelength[] =
        { 0, 5, 7, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
        public static final int table_cd_groupingtables[][] =
        { null, grouping_5bits, grouping_7bits, grouping_10bits, null, null, null, null, null, null, null, null, null, null, null, null };
        public static final int table_cd_factor[] =
        {
            0, 32768, 16384, 8192, 8192, 4096, 2048, 1024, 
            512, 256, 128, 64, 32, 16, 8, 4, 
        };

        public static final int table_cd_c[] =
        {
            0, 87381, 104858, 116508, 69905, 67650, 66576, 66052, 
            65793, 65664, 65600, 65568, 65552, 65544, 65540, 65538, 
        };

        public static final int table_cd_d[] =
        {
            0, 32768, 32768, 32768, 8192, 4096, 2048, 1024, 
            512, 256, 128, 64, 32, 16, 8, 4, 
        };

        
        protected int 			subbandnumber;
        protected int			allocation;
        protected int			scfsi;
        protected int			scalefactor1, scalefactor2, scalefactor3;
        protected int[] 		codelength = {0};
        protected int[][] 	groupingtable = { null };
        protected int[]		factor = {0};
        protected int			groupnumber = 0;
        protected int			samplenumber = 0;
        protected int[]		samples = new int[3];
        protected int[]		c = {0};
        protected int[]		d = {0};

        public SubbandLayer2(int subbandnumber)
        {	
            this.subbandnumber = subbandnumber;
        }
        // FIXME: reset state to initial values
        public void reset()
        {
            allocation = 0;
            scfsi = 0;
            scalefactor1 = 0; scalefactor2 = 0; scalefactor3 = 0;
            codelength[0] = 0;
            groupingtable[0] = null;
            factor[0] = 0;
            groupnumber = 0;
            samplenumber = 0;
            samples[0] = 0;
            samples[1] = 0;
            samples[2] = 0;
            c[0] = 0;
            d[0] = 0;
        }
	  
        /**
         *
         */
        protected int getAllocationLength (AudioFrameHeader header)
        {
            if (header.getVersion() == AudioFrameHeader.MPEG1) {
                int channel_bitrate = header.getBitRateIndex();

                // calculate bitrate per channel:
                if (header.getMode() != AudioFrameHeader.SINGLE_CHANNEL)
                    if (channel_bitrate == 4)
                        channel_bitrate = 1;
                    else
                        channel_bitrate -= 4;

                if (channel_bitrate == 1 || channel_bitrate == 2)
                    // table 3-B.2c or 3-B.2d
                    if (subbandnumber <= 1)
                        return 4;
                    else
                        return 3;
                else
                    // tables 3-B.2a or 3-B.2b
                    if (subbandnumber <= 10)
                        return 4;
                    else if (subbandnumber <= 22)
                        return 3;
                    else
                        return 2;
            } else { // MPEG-2 LSF -- Jeff

                // table B.1 of ISO/IEC 13818-3
                if (subbandnumber <= 3)
                    return 4;
                else if (subbandnumber <= 10)
                    return 3;
                else
                    return 2;
            }
        }
	  
        /**
         *
         */
        protected void prepareSampleReading(AudioFrameHeader header, int allocation,
                                              int[][] gt,
                                              int[] factor, int[] codelength,
                                              int[] c, int[] d) {

            int channel_bitrate = header.getBitRateIndex();

            // calculate bitrate per channel:
            if (header.getMode() != AudioFrameHeader.SINGLE_CHANNEL)
                if (channel_bitrate == 4)
                    channel_bitrate = 1;
                else
                    channel_bitrate -= 4;
			
            if (channel_bitrate == 1 || channel_bitrate == 2) {
                // table 3-B.2c or 3-B.2d
                gt[0] = table_cd_groupingtables[allocation];
                factor[0] = table_cd_factor[allocation];
                codelength[0] = table_cd_codelength[allocation];
                c[0] = table_cd_c[allocation];
                d[0] = table_cd_d[allocation];
            } else {
                // tables 3-B.2a or 3-B.2b
                if (subbandnumber <= 2) {
                    gt[0] = table_ab1_groupingtables[allocation];
                    factor[0] = table_ab1_factor[allocation];
                    codelength[0] = table_ab1_codelength[allocation];
                    c[0] = table_ab1_c[allocation];
                    d[0] = table_ab1_d[allocation];
                } else {
                    gt[0] = table_ab234_groupingtables[allocation];
                    if (subbandnumber <= 10) {
                        factor[0] = table_ab2_factor[allocation];
                        codelength[0] = table_ab2_codelength[allocation];
                        c[0] = table_ab2_c[allocation];
                        d[0] = table_ab2_d[allocation];
                    } else if (subbandnumber <= 22) {
                        factor[0] = table_ab3_factor[allocation];
                        codelength[0] = table_ab3_codelength[allocation];
                        c[0] = table_ab3_c[allocation];
                        d[0] = table_ab3_d[allocation];
                    } else {
                        factor[0] = table_ab4_factor[allocation];
                        codelength[0] = table_ab4_codelength[allocation];
                        c[0] = table_ab4_c[allocation];
                        d[0] = table_ab4_d[allocation];
                    }
                }
            }
        }
	  
        /**
         *
         */
        public void readAllocation(IOTool stream, AudioFrameHeader header, CRC16 crc)
            throws MpegAudioDecodeException
        {
            try
            {
                int length = getAllocationLength(header);
                allocation = stream.getBits(length);
                if (crc != null) 
                    crc.add_bits(allocation, length);
            }
            catch(IOException e)
            {
                throw new MpegAudioDecodeException(e.getMessage() );
            }
        }
	  
        /**
         *
         */
        public void readScaleFactorSelection (IOTool stream, CRC16 crc)
        {
            try
            {
                if (allocation != 0) {
                scfsi = stream.getBits(2);
                if (crc != null) crc.add_bits(scfsi, 2);
                }
            }
            catch(IOException e)
            {
                throw new MpegAudioDecodeException(e.getMessage() );
            }
        }

        /**
         *
         */
        public void readScaleFactor(IOTool stream, AudioFrameHeader header)
            throws MpegAudioDecodeException
        {
            try
            {
            if (allocation != 0) {
                switch (scfsi) {
                case 0:
                    scalefactor1 = scalefactors[stream.getBits(6)];
                    scalefactor2 = scalefactors[stream.getBits(6)];
                    scalefactor3 = scalefactors[stream.getBits(6)];
                    break;
                case 1:
                    scalefactor1 = scalefactor2 = scalefactors[stream.getBits(6)];
                    scalefactor3 = scalefactors[stream.getBits(6)];
                    break;
                case 2:
                    scalefactor1 = scalefactor2 = scalefactor3 = scalefactors[stream.getBits(6)];
                    break;
                case 3:
                    scalefactor1 = scalefactors[stream.getBits(6)];
                    scalefactor2 = scalefactor3 = scalefactors[stream.getBits(6)];
                    break;
                }
                prepareSampleReading(header, allocation, groupingtable,
                                       factor, codelength, c, d);
            }
            }
            catch(IOException e)
            {
                throw new MpegAudioDecodeException(e.getMessage() );
            }
        }

        // static int count = 0;
        public boolean readSampleData (IOTool stream)
            throws MpegAudioDecodeException
        {
            try
            {
            if (allocation != 0) {
                if (groupingtable[0] != null) {

                    int samplecode = stream.getBits(codelength[0]);
                    samplecode += samplecode << 1;
                    int[] source = groupingtable[0];

                    // if (count > 1300) System.out.print(count + ":" + samplecode + " ");
                    // if (count > 1300 && count % 20 == 0) System.out.println();
                    // count++;
                    samples[0] = source[samplecode];
                    samples[1] = source[samplecode + 1];
                    samples[2] = source[samplecode + 2];
                } else {
                    final int fct = factor[0];
                    final int cl = codelength[0];

                    samples[0] =  (FP.mul( FP.toFP(stream.getBits(cl)), fct ) - FP.toFP(1));
                    samples[1] =  (FP.mul( FP.toFP(stream.getBits(cl)), fct ) - FP.toFP(1));
                    samples[2] =  (FP.mul( FP.toFP(stream.getBits(cl)), fct ) - FP.toFP(1));
                }
            }

            samplenumber = 0;
            if (++groupnumber == 12)
                return true;
            else
                return false;
            }
            catch(IOException e)
            {
                throw new MpegAudioDecodeException(e.getMessage() );
            }
        }

        /**
         *
         */
        public boolean putNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
            throws MpegAudioDecodeException
        {
            if ((allocation != 0) && (channels != OutputChannels.RIGHT_CHANNEL)) {
                int sample = samples[samplenumber];
	  
                if (groupingtable[0] == null)
                    sample = FP.mul((sample + d[0]), c[0]);
                // System.out.println(" c: " + c[0] + " d: " + d[0] + " samp: " + sample + " gt: " + groupingtable[0]);
                if (groupnumber <= 4)
                    sample = FP.mul(sample, scalefactor1);
                else if (groupnumber <= 8)
                    sample = FP.mul(sample,scalefactor2);
                else
                    sample = FP.mul(sample,scalefactor3);

                filter1.input_sample(sample, subbandnumber);
            }
	  
            if (++samplenumber == 3)
                return true;
            else
                return false;
        }
    };
	
    /**
     * Class for layer II subbands in joint stereo mode.
     */
    static class SubbandLayer2IntensityStereo extends SubbandLayer2
    {
        protected int		 channel2_scfsi;
        protected int 	 channel2_scalefactor1, channel2_scalefactor2, channel2_scalefactor3;

        public SubbandLayer2IntensityStereo(int subbandnumber) {
            super(subbandnumber);
        }

        public void reset() {
            super.reset();
            channel2_scfsi = 0;
            channel2_scalefactor1= 0; channel2_scalefactor2 = 0; channel2_scalefactor3 = 0;
        }

	  
        /**
         * joint stereo
         */
        public void readScalefactorSelection(IOTool stream, CRC16 crc)
        {
            try
            {
            if (allocation != 0) {
                scfsi = stream.getBits(2);
                channel2_scfsi = stream.getBits(2);
                if (crc != null) {
                    crc.add_bits(scfsi, 2);
                    crc.add_bits(channel2_scfsi, 2);
                }
            }
            }
            catch(IOException e)
            {
                throw new RuntimeException(e.getMessage() );
            }
        }
	  
        /**
         * joint stereo
         */
        public void readScaleFactor(IOTool stream, AudioFrameHeader header)
            throws MpegAudioDecodeException
        {
            try
            {
            if (allocation != 0) {
                super.readScaleFactor(stream, header);
                switch (channel2_scfsi) {
                case 0:
                    channel2_scalefactor1 = scalefactors[stream.getBits(6)];
                    channel2_scalefactor2 = scalefactors[stream.getBits(6)];
                    channel2_scalefactor3 = scalefactors[stream.getBits(6)];
                    break;
	  
                case 1:
                    channel2_scalefactor1 = channel2_scalefactor2 = scalefactors[stream.getBits(6)];
                    channel2_scalefactor3 = scalefactors[stream.getBits(6)];
                    break;
	  
                case 2:
                    channel2_scalefactor1 = channel2_scalefactor2 =
                        channel2_scalefactor3 = scalefactors[stream.getBits(6)];
                    break;
	  
                case 3:
                    channel2_scalefactor1 = scalefactors[stream.getBits(6)];
                    channel2_scalefactor2 = channel2_scalefactor3 = scalefactors[stream.getBits(6)];
                    break;
                }
            }
            }
            catch(IOException e)
            {
                throw new MpegAudioDecodeException(e.getMessage() );
            }
        }
	  
	  
        /**
         * joint stereo
         */
        public boolean putNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
            throws MpegAudioDecodeException
        {
            if (allocation != 0){
                int sample = samples[samplenumber];
		
                if (groupingtable[0] == null)
                    sample = FP.mul( (sample + d[0]), c[0]);
                if (channels == OutputChannels.BOTH_CHANNELS) {
                    int sample2 = sample;
                    if (groupnumber <= 4) {
                        sample = FP.mul(sample,scalefactor1);
                        sample2 = FP.mul(sample2, channel2_scalefactor1);
                    }
                    else if (groupnumber <= 8) {
                        sample = FP.mul(sample,scalefactor2);
                        sample2 = FP.mul(sample2,channel2_scalefactor2);
                    } else {
                        sample = FP.mul(sample,scalefactor3);
                        sample2 = FP.mul(sample2,channel2_scalefactor3);
                    }
                    filter1.input_sample(sample, subbandnumber);
                    filter2.input_sample(sample2, subbandnumber);
                }
                else if (channels == OutputChannels.LEFT_CHANNEL) {
                    if (groupnumber <= 4)
                        sample = FP.mul(sample,scalefactor1);
                    else if (groupnumber <= 8)
                        sample = FP.mul( sample, scalefactor2);
                    else
                        sample = FP.mul(sample, scalefactor3);
                    filter1.input_sample(sample, subbandnumber);
                } else {
                    if (groupnumber <= 4)
                        sample = FP.mul(sample, channel2_scalefactor1);
                    else if (groupnumber <= 8)
                        sample = FP.mul(sample,channel2_scalefactor2);
                    else
                        sample = FP.mul(sample,channel2_scalefactor3);
                    filter1.input_sample(sample, subbandnumber);
                }
            }
		
            if (++samplenumber == 3)
                return true;
            else
                return false;
        }
    };

    /**
     * Class for layer II subbands in stereo mode.
     */
    static class SubbandLayer2Stereo extends SubbandLayer2
    {
        protected int		channel2_allocation;
        protected int 		channel2_scfsi;
        protected int	 	channel2_scalefactor1, channel2_scalefactor2, channel2_scalefactor3;
        protected boolean	channel2_grouping;
        protected int[] 	channel2_codelength = {0};
        protected int[][] channel2_groupingtable = { null };
        protected int[]	channel2_factor = {0};
        protected int[] 	channel2_samples = new int[3];
        protected int[]	channel2_c = {0};
        protected int[]	channel2_d = {0};
	  
        public SubbandLayer2Stereo(int subbandnumber) {
            super(subbandnumber);
        }

        public void reset() {
            super.reset();
            channel2_allocation = 0;
            channel2_scfsi = 0;
            channel2_scalefactor1 = 0; channel2_scalefactor2 = 0; channel2_scalefactor3 = 0;
            channel2_grouping = false;
            channel2_codelength[0] = 0;
            channel2_groupingtable[0] = null;
            channel2_factor[0] = 0;
            channel2_samples[0] = 0;
            channel2_samples[1] = 0;
            channel2_samples[2] = 0;
            channel2_c[0] = 0;
            channel2_d[0] = 0;
        }


        /**
         * stereo
         */
        public void readAllocation (IOTool stream, AudioFrameHeader header, CRC16 crc)
            throws MpegAudioDecodeException
        {
            try
            {
            int length = getAllocationLength(header);
            allocation = stream.getBits(length);
            channel2_allocation = stream.getBits(length);
            if (crc != null) {
                crc.add_bits(allocation, length);
                crc.add_bits(channel2_allocation, length);
            }
            }
            catch(IOException e)
            {
                throw new MpegAudioDecodeException(e.getMessage() );
            }
        }

        /**
         * stereo
         */
        public void readScalefactorSelection(IOTool stream, CRC16 crc)
        {
            try
            {
            if (allocation != 0) {
                scfsi = stream.getBits(2);
                if (crc != null)
                    crc.add_bits(scfsi, 2);
            }
            if (channel2_allocation != 0) {
                channel2_scfsi = stream.getBits(2);
                if (crc != null)
                    crc.add_bits(channel2_scfsi, 2);
            }
            }
            catch(IOException e)
            {
                throw new RuntimeException(e.getMessage() );
            }
        }

        /**
         * stereo
         */
        public void readScaleFactor(IOTool stream, AudioFrameHeader header)
            throws MpegAudioDecodeException
        {
            try
            {
                super.readScaleFactor(stream, header);
                if (channel2_allocation != 0)
                {
                    switch (channel2_scfsi)
                    {
                    case 0:
                        channel2_scalefactor1 = scalefactors[stream.getBits(6)];
                        channel2_scalefactor2 = scalefactors[stream.getBits(6)];
                        channel2_scalefactor3 = scalefactors[stream.getBits(6)];
                        break;

                    case 1:
                        channel2_scalefactor1 = channel2_scalefactor2 =
                            scalefactors[stream.getBits(6)];
                        channel2_scalefactor3 = scalefactors[stream.getBits(6)];
                        break;

                    case 2:
                        channel2_scalefactor1 = channel2_scalefactor2 =
                            channel2_scalefactor3 = scalefactors[stream.getBits(6)];
                        break;

                    case 3:
                        channel2_scalefactor1 = scalefactors[stream.getBits(6)];
                        channel2_scalefactor2 = channel2_scalefactor3 =
                            scalefactors[stream.getBits(6)];
                        break;
                    }
                    prepareSampleReading(header, channel2_allocation, channel2_groupingtable,
                                         channel2_factor, channel2_codelength, channel2_c,
                                         channel2_d);
                }
            }
            catch(IOException e)
            {
                throw new MpegAudioDecodeException(e.getMessage() );
            }
            
        }

        /**
         * stereo
         */
        public boolean readSampleData(IOTool stream)
            throws MpegAudioDecodeException
        {
            try
            {
                boolean returnvalue = super.readSampleData(stream);

                if (channel2_allocation != 0)
                    if (channel2_groupingtable[0] != null) {
                        int samplecode = stream.getBits(channel2_codelength[0]);

                        // create requantized samples:
                        samplecode += samplecode << 1;
                        int[] source = channel2_groupingtable[0];
                        channel2_samples[0] = source[samplecode];
                        channel2_samples[1] = source[samplecode + 1];
                        channel2_samples[2] = source[samplecode + 2];
                    } else {
                        final int c2f = channel2_factor[0];
                        final int c2cl = channel2_codelength[0];
                        channel2_samples[0] = ( FP.mul( FP.toFP(stream.getBits(c2cl)), c2f ) - FP.toFP(1));
                        channel2_samples[1] = ( FP.mul( FP.toFP(stream.getBits(c2cl)), c2f ) - FP.toFP(1));
                        channel2_samples[2] = ( FP.mul( FP.toFP(stream.getBits(c2cl)), c2f ) - FP.toFP(1));
                    }
			
                return returnvalue;
            }
            catch(IOException e)
            {
                throw new MpegAudioDecodeException(e.getMessage() );
            }
        }


        /**
         * stereo
         */
        public boolean putNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
            throws MpegAudioDecodeException
        {
            boolean returnvalue = super.putNextSample(channels, filter1, filter2);
            if ((channel2_allocation != 0) && (channels != OutputChannels.LEFT_CHANNEL)) {
                int sample = channel2_samples[samplenumber - 1];

                // FIX 4/24/01: check 0th element of groupingtable for
                // null, not groupingtable itself! (fixes ringing bug)
                if (channel2_groupingtable[0] == null)
                    sample = FP.mul((sample + channel2_d[0]), channel2_c[0]);
	  
                if (groupnumber <= 4)
                    sample = FP.mul(sample,channel2_scalefactor1);
                else if (groupnumber <= 8)
                    sample = FP.mul(sample,channel2_scalefactor2);
                else
                    sample = FP.mul(sample,channel2_scalefactor3);
                if (channels == OutputChannels.BOTH_CHANNELS)
                    filter2.input_sample(sample, subbandnumber);
                else
                    filter1.input_sample(sample, subbandnumber);
            }
            return returnvalue;
        }
    }
}


